// <auto-generated />
using System;
using EF.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EF.Data.Migrations
{
    [DbContext(typeof(EntityFrameworkPractiseDbContext))]
    partial class EntityFrameworkPractiseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("sch")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EF.Core.Entities.Directory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentDirectoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id")
                        .HasName("PK_Directories")
                        .IsClustered();

                    b.ToTable("Directories", "sch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "C:"
                        },
                        new
                        {
                            Id = 2,
                            Title = "F:"
                        },
                        new
                        {
                            Id = 3,
                            ParentDirectoryId = 1,
                            Title = "Users"
                        },
                        new
                        {
                            Id = 4,
                            ParentDirectoryId = 2,
                            Title = "MyFiles"
                        });
                });

            modelBuilder.Entity("EF.Core.Entities.DirectoryPermission", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectoryId")
                        .HasColumnType("int");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("bit");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DirectoryId");

                    b.HasIndex("DirectoryId");

                    b.ToTable("DirectoryPermissions");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DirectoryId = 1,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            DirectoryId = 2,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            DirectoryId = 3,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            DirectoryId = 4,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            DirectoryId = 1,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            DirectoryId = 2,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            DirectoryId = 3,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            DirectoryId = 4,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            DirectoryId = 1,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            DirectoryId = 2,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            DirectoryId = 3,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            DirectoryId = 4,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        });
                });

            modelBuilder.Entity("EF.Core.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DirectoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Size")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Title")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("DirectoryId");

                    b.ToTable("Files", "sch");
                });

            modelBuilder.Entity("EF.Core.Entities.FilePermission", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("bit");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("FilePermissions");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FileId = 1,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 2,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 3,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 4,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 5,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 6,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 7,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 8,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 9,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 10,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 11,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 12,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 1,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 2,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 3,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 4,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 5,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 6,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 7,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 8,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 9,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 10,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 11,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 12,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 1,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 2,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 3,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 4,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 5,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 6,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 7,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 8,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 9,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 10,
                            CanRead = true,
                            CanWrite = false,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 11,
                            CanRead = true,
                            CanWrite = true,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 12,
                            CanRead = false,
                            CanWrite = false,
                            Id = 0
                        });
                });

            modelBuilder.Entity("EF.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("UserName")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id")
                        .HasName("PK_Users")
                        .IsClustered();

                    b.ToTable("Users", "sch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Vlad@ukrnet.com",
                            PasswordHash = "1324sdtr4",
                            UserName = "Vlad"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Polya@gmail.com",
                            PasswordHash = "654634hfga",
                            UserName = "Polya"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Danya@gmail.com",
                            PasswordHash = "s54436366",
                            UserName = "Danya"
                        });
                });

            modelBuilder.Entity("EF.Core.Entities.AudioFile", b =>
                {
                    b.HasBaseType("EF.Core.Entities.File");

                    b.Property<string>("Bitrate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChannelCount")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("SampleRate")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("AudioFiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectoryId = 4,
                            Extension = ".mp3",
                            Size = "5 Mb",
                            Title = "Rock",
                            Bitrate = "320kbps",
                            ChannelCount = 2,
                            Duration = new TimeSpan(0, 5, 30, 30, 0),
                            SampleRate = "192 кГц"
                        },
                        new
                        {
                            Id = 2,
                            DirectoryId = 3,
                            Extension = ".ogg",
                            Size = "10 Mb",
                            Title = "Pop",
                            Bitrate = "160kbps",
                            ChannelCount = 4,
                            Duration = new TimeSpan(0, 3, 20, 20, 0),
                            SampleRate = "96 кГц"
                        },
                        new
                        {
                            Id = 3,
                            DirectoryId = 4,
                            Extension = ".mp3",
                            Size = "7 Mb",
                            Title = "Country",
                            Bitrate = "480kbps",
                            ChannelCount = 3,
                            Duration = new TimeSpan(0, 4, 25, 25, 0),
                            SampleRate = "192 кГц"
                        });
                });

            modelBuilder.Entity("EF.Core.Entities.ImageFile", b =>
                {
                    b.HasBaseType("EF.Core.Entities.File");

                    b.Property<int>("Heigth")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.ToTable("ImageFiles");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            DirectoryId = 1,
                            Extension = ".jpg",
                            Size = "1 Mb",
                            Title = "Art",
                            Heigth = 720,
                            Width = 480
                        },
                        new
                        {
                            Id = 5,
                            DirectoryId = 3,
                            Extension = ".jpg",
                            Size = "2 Mb",
                            Title = "War",
                            Heigth = 1280,
                            Width = 720
                        },
                        new
                        {
                            Id = 6,
                            DirectoryId = 4,
                            Extension = ".jpg",
                            Size = "2 Mb",
                            Title = "Apple",
                            Heigth = 1680,
                            Width = 1280
                        });
                });

            modelBuilder.Entity("EF.Core.Entities.TextFile", b =>
                {
                    b.HasBaseType("EF.Core.Entities.File");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TextFiles");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            DirectoryId = 3,
                            Extension = ".txt",
                            Size = "3 Mb",
                            Title = "Dictionary",
                            Content = "Dictionary text"
                        },
                        new
                        {
                            Id = 11,
                            DirectoryId = 4,
                            Extension = ".docx",
                            Size = "2 Mb",
                            Title = "Wishes",
                            Content = "List of wishes"
                        },
                        new
                        {
                            Id = 12,
                            DirectoryId = 4,
                            Extension = ".docx",
                            Size = "800 Mb",
                            Title = "Zero",
                            Content = "Zero text"
                        });
                });

            modelBuilder.Entity("EF.Core.Entities.VideoFile", b =>
                {
                    b.HasBaseType("EF.Core.Entities.File");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.ToTable("VideoFiles");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            DirectoryId = 2,
                            Extension = ".mp4",
                            Size = "2 Gb",
                            Title = "Romantic",
                            Duration = new TimeSpan(0, 1, 15, 21, 0),
                            Height = 720,
                            Width = 480
                        },
                        new
                        {
                            Id = 8,
                            DirectoryId = 4,
                            Extension = ".wmv",
                            Size = "5 Gb",
                            Title = "Hero",
                            Duration = new TimeSpan(0, 2, 25, 20, 0),
                            Height = 1080,
                            Width = 1920
                        },
                        new
                        {
                            Id = 9,
                            DirectoryId = 3,
                            Extension = ".mp4",
                            Size = "1 Gb",
                            Title = "777",
                            Duration = new TimeSpan(0, 6, 50, 50, 0),
                            Height = 1680,
                            Width = 1280
                        });
                });

            modelBuilder.Entity("EF.Core.Entities.DirectoryPermission", b =>
                {
                    b.HasOne("EF.Core.Entities.Directory", "Directory")
                        .WithMany("DirectoryPermissions")
                        .HasForeignKey("DirectoryId")
                        .HasConstraintName("FK_DirectoryPermissions_Directory_DirectoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EF.Core.User", "User")
                        .WithMany("DirectoryPermissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_DirectoryPermissions_Users_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Directory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EF.Core.Entities.File", b =>
                {
                    b.HasOne("EF.Core.Entities.Directory", "Directories")
                        .WithMany("Files")
                        .HasForeignKey("DirectoryId")
                        .HasConstraintName("FK_Directory_File_DirectoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Directories");
                });

            modelBuilder.Entity("EF.Core.Entities.FilePermission", b =>
                {
                    b.HasOne("EF.Core.Entities.File", "File")
                        .WithMany("FilePermissions")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_FilePermissions_File_FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EF.Core.User", "User")
                        .WithMany("FilePermissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FilePermissions_Users_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EF.Core.Entities.AudioFile", b =>
                {
                    b.HasOne("EF.Core.Entities.File", null)
                        .WithOne()
                        .HasForeignKey("EF.Core.Entities.AudioFile", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF.Core.Entities.ImageFile", b =>
                {
                    b.HasOne("EF.Core.Entities.File", null)
                        .WithOne()
                        .HasForeignKey("EF.Core.Entities.ImageFile", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF.Core.Entities.TextFile", b =>
                {
                    b.HasOne("EF.Core.Entities.File", null)
                        .WithOne()
                        .HasForeignKey("EF.Core.Entities.TextFile", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF.Core.Entities.VideoFile", b =>
                {
                    b.HasOne("EF.Core.Entities.File", null)
                        .WithOne()
                        .HasForeignKey("EF.Core.Entities.VideoFile", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF.Core.Entities.Directory", b =>
                {
                    b.Navigation("DirectoryPermissions");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("EF.Core.Entities.File", b =>
                {
                    b.Navigation("FilePermissions");
                });

            modelBuilder.Entity("EF.Core.User", b =>
                {
                    b.Navigation("DirectoryPermissions");

                    b.Navigation("FilePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
