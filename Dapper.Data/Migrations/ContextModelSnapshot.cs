// <auto-generated />
using System;
using Dapper.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dapper.Data.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("sch")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dapper.Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Country_Code")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id")
                        .HasName("PK_Country")
                        .IsClustered();

                    b.ToTable("Country", "sch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country_Code = 65346,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 2,
                            Country_Code = 54356,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 3,
                            Country_Code = 35425,
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 4,
                            Country_Code = 65467,
                            Name = "Serbia"
                        });
                });

            modelBuilder.Entity("Dapper.Core.Entities.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryCode")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasMaxLength(32)
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Merchant")
                        .IsClustered();

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Merchant", "sch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = 0,
                            CountryId = 1,
                            CreatedAt = new DateTime(2021, 7, 11, 23, 14, 55, 48, DateTimeKind.Local).AddTicks(1270),
                            Name = "Tom",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = 0,
                            CountryId = 2,
                            CreatedAt = new DateTime(2021, 7, 11, 23, 14, 55, 48, DateTimeKind.Local).AddTicks(3368),
                            Name = "Sara",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Dapper.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasMaxLength(32)
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderJson")
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Status")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Order")
                        .IsClustered();

                    b.HasIndex("UserID");

                    b.ToTable("Order", "sch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 7, 11, 23, 14, 55, 48, DateTimeKind.Local).AddTicks(5884),
                            OrderJson = "{\"OrderId\":1,\"User\":{\"FullName\":\"Tom Jons\",\"Email\":\"Jons@mail.com\"},\"Products\":[{\"Name\":\"Computer\",\"Price\":\"2000\",\"merchant\":{\"Name\":\"Tom\"}}]}",
                            Status = "in the process",
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 7, 11, 23, 14, 55, 184, DateTimeKind.Local).AddTicks(7014),
                            OrderJson = "{\"OrderId\":1,\"User\":{\"FullName\":\"Tom Jons\",\"Email\":\"Jons@mail.com\"},\"Products\":[{\"Name\":\"DVD\",\"Price\":\"1000\",\"merchant\":{\"Name\":\"Tom\"}}]}",
                            Status = "in the process",
                            UserID = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 7, 11, 23, 14, 55, 184, DateTimeKind.Local).AddTicks(8150),
                            OrderJson = "{\"OrderId\":1,\"User\":{\"FullName\":\"Sara Ken\",\"Email\":\"Ken@mail.com\"},\"Products\":[{\"Name\":\"Smart TV\",\"Price\":\"4000\",\"merchant\":{\"Name\":\"Sara\"}}]}",
                            Status = "Finished",
                            UserID = 2
                        });
                });

            modelBuilder.Entity("Dapper.Core.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasMaxLength(32)
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_OrdersItem")
                        .IsClustered();

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem", "sch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 3,
                            ProductId = 3,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Dapper.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasMaxLength(32)
                        .HasColumnType("datetime2");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(32)");

                    b.Property<double>("Price")
                        .HasMaxLength(32)
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id")
                        .HasName("PK_Product")
                        .IsClustered();

                    b.HasIndex("MerchantId");

                    b.ToTable("Product", "sch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 7, 11, 23, 14, 55, 185, DateTimeKind.Local).AddTicks(304),
                            MerchantId = 1,
                            Name = "Computer",
                            Price = 2000.0,
                            Status = "In the process"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 7, 11, 23, 14, 55, 185, DateTimeKind.Local).AddTicks(979),
                            MerchantId = 1,
                            Name = "DVD",
                            Price = 1000.0,
                            Status = "In the process"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 7, 11, 23, 14, 55, 185, DateTimeKind.Local).AddTicks(995),
                            MerchantId = 2,
                            Name = "Smart TV",
                            Price = 4000.0,
                            Status = "Finished"
                        });
                });

            modelBuilder.Entity("Dapper.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryCode")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasMaxLength(32)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasMaxLength(32)
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("FullName")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Gender")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id")
                        .HasName("PK_User")
                        .IsClustered();

                    b.HasIndex("CountryId");

                    b.ToTable("User", "sch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedAt = new DateTime(2021, 7, 11, 23, 14, 55, 41, DateTimeKind.Local).AddTicks(6350),
                            DateOfBirth = new DateTime(2005, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Jons@mail.com",
                            FullName = "Tom Jons",
                            Gender = "Male"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            CreatedAt = new DateTime(2021, 7, 11, 23, 14, 55, 46, DateTimeKind.Local).AddTicks(1920),
                            DateOfBirth = new DateTime(1999, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ken@mail.com",
                            FullName = "Sara Ken",
                            Gender = "Female"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            CreatedAt = new DateTime(2021, 7, 11, 23, 14, 55, 46, DateTimeKind.Local).AddTicks(1980),
                            DateOfBirth = new DateTime(1998, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Son@mail.com",
                            FullName = "Justin Son",
                            Gender = "Male"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 4,
                            CreatedAt = new DateTime(2021, 7, 11, 23, 14, 55, 46, DateTimeKind.Local).AddTicks(1987),
                            DateOfBirth = new DateTime(1995, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Yon@mail.com",
                            FullName = "Nasty Yon",
                            Gender = "Female"
                        });
                });

            modelBuilder.Entity("Dapper.Core.Entities.Merchant", b =>
                {
                    b.HasOne("Dapper.Core.Entities.Country", "Country")
                        .WithMany("Merchants")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Country_Merchants_CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dapper.Core.Entities.User", "User")
                        .WithOne("Merchant")
                        .HasForeignKey("Dapper.Core.Entities.Merchant", "UserId")
                        .HasConstraintName("FK_User_Merchant_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dapper.Core.Entities.Order", b =>
                {
                    b.HasOne("Dapper.Core.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_User_Orders_UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dapper.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("Dapper.Core.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Order_OrderItems_OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dapper.Core.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Product_OrderItems_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Dapper.Core.Entities.Product", b =>
                {
                    b.HasOne("Dapper.Core.Entities.Merchant", "Merchant")
                        .WithMany("Products")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("FK_Merchant_Products_MerchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Dapper.Core.Entities.User", b =>
                {
                    b.HasOne("Dapper.Core.Entities.Country", "CountryCodes")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_CountryCodes_Users_CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CountryCodes");
                });

            modelBuilder.Entity("Dapper.Core.Entities.Country", b =>
                {
                    b.Navigation("Merchants");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Dapper.Core.Entities.Merchant", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Dapper.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Dapper.Core.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Dapper.Core.Entities.User", b =>
                {
                    b.Navigation("Merchant");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
